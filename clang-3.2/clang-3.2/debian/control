Source: clang-3.2
Section: devel
Priority: extra
Maintainer: ABE Hiroki (hATrayflood) <h.rayflood@gmail.com>
Build-Depends: debhelper (>= 9.0), flex, bison, dejagnu, tcl8.5, expect,
    autoconf, automake1.9, perl, libtool, doxygen, chrpath, texinfo,
    sharutils, autotools-dev (>= 20060702.1), libffi-dev (>= 3.0.9),
    lsb-release, patchutils, diffstat, xz-utils, llvm-3.2-dev (>= 3.2),
    llvm-3.2-source (>= 3.2), chrpath, python
Build-Conflicts: oprofile, ocaml
Standards-Version: 3.9.3
Homepage: https://launchpad.net/~h-rayflood/+archive/llvm
Vcs-Browser: https://github.com/hATrayflood/llvm-ppa


Package: clang-3.2
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++6-4.6-dev,
 libclang-3.2-common-dev (= ${binary:Version}), compiler-rt-3.2 (= ${binary:Version})
Provides: c-compiler, objc-compiler, c++-compiler
Recommends: llvm-3.2-dev, python
Description: C, C++ and Objective-C compiler (LLVM based)
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants

Package: clang-3.2-doc
Architecture: all
Section: doc
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: C, C++ and Objective-C compiler (LLVM based) - Documentation
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the documentation.

Package: libclang1-3.2
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++6-4.6-dev
Description: clang library
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the clang library.

Package: libclang-3.2-dev
Architecture: any
Section: libdevel
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++6-4.6-dev,
 libclang1-3.2 (= ${binary:Version}), libclang-3.2-common-dev
Description: clang library - Development package
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the clang headers to develop extensions over libclang.

Package: libclang-3.2-common-dev
Architecture: any
Replaces: libclang-3.2-dev
Section: libdevel
Depends: ${misc:Depends}
Description: clang library - Common development package
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the clang generic headers.


Package: compiler-rt-3.2
Architecture: amd64 i386
Replaces: libclang-3.2-dev
Section: libdevel
Depends: ${misc:Depends}, python
Description: Runtime C library - LLVM based
 The compiler-rt project is a simple library that provides an implementation of
 the low-level target-specific hooks required by code generation and other
 runtime components. For example, when compiling for a 32-bit target,
 converting a double to a 64-bit unsigned integer is compiling into a runtime
 call to the "__fixunsdfdi" function. The compiler-rt library provides
 optimized implementations of this and other low-level routines.
 .
 The current feature set of compiler-rt is:
 .
    * Full support for the libgcc interfaces on supported targets.
    * High performance hand tuned implementations of commonly used functions
      like __floatundidf in assembly that are dramatically faster than the
      libgcc implementations.
 .
