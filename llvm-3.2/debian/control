Source: llvm-3.2
Section: devel
Priority: optional
Maintainer: LLVM Packaging Team <pkg-llvm-team@lists.alioth.debian.org>
Uploaders: Sylvestre Ledru <sylvestre@debian.org>
Build-Depends: debhelper (>= 9), flex, bison, dejagnu, tcl8.5, expect,
    autoconf, automake1.9, perl, libtool, doxygen, chrpath, texinfo, quilt,
    sharutils, autotools-dev (>= 20060702.1), libffi-dev (>= 3.0.9),
    lsb-release, xz-utils, dh-exec (>=0.3), python, python-sphinx,
    binutils-dev (>= 2.20.51.20100222-1~), ocaml-nox (>= 3.11.2), ocaml-best-compilers | ocaml-nox, dh-ocaml (>= 0.9.1)
Build-Conflicts: oprofile
Standards-Version: 3.9.3
Homepage: http://www.llvm.org/
Vcs-Svn: svn://svn.debian.org/svn/pkg-llvm/llvm/trunk/
Vcs-Browser: http://svn.debian.org/viewsvn/pkg-llvm/llvm/trunk/


Package: libllvm3.2
Architecture: any
Section: libs
Depends: ${shlibs:Depends}, ${misc:Depends}
Pre-Depends: ${misc:Pre-Depends}
Multi-Arch: same
Description: Low-Level Virtual Machine (LLVM), runtime library
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs.
 .
 This package contains the LLVM runtime library.

Package: libllvm3.2-dbg
Architecture: any
Section: debug
Priority: extra
Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm3.2
Pre-Depends: ${misc:Pre-Depends}
Multi-Arch: same
Description: Low-Level Virtual Machine (LLVM), debugging symbols library
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs.
 .
 This package contains the LLVM runtime library debug symbols.

Package: llvm-3.2
Architecture: any
Suggests: llvm-3.2-doc
Depends: llvm-3.2-runtime (= ${binary:Version}), ${shlibs:Depends}, ${misc:Depends}
Recommends: llvm-3.2-dev
Conflicts: llvm (<< 2.7-1)
Replaces: llvm (<< 2.7-1)
Description: Low-Level Virtual Machine (LLVM)
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 The strengths of the LLVM infrastructure are its extremely
 simple design (which makes it easy to understand and use),
 source-language independence, powerful mid-level optimizer, automated
 compiler debugging support, extensibility, and its stability and
 reliability. LLVM is currently being used to host a wide variety of
 academic research projects and commercial projects. LLVM includes C
 and C++ front-ends, a front-end for a Forth-like language (Stacker), 
 a young scheme front-end, and Java support is in development. LLVM can
 generate code for X86, SparcV9, PowerPC, or it can emit C code.
 .
 LLVM is the key component of the clang compiler and the gcc plugin called
 dragonegg.

Package: llvm-3.2-runtime
Architecture: any
Depends: binfmt-support, ${shlibs:Depends}, ${misc:Depends}
Conflicts: llvm (<< 2.7-1)
Replaces: llvm (<< 2.7-1)
Description: Low-Level Virtual Machine (LLVM), bytecode interpreter
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides the minimal required to execute programs in LLVM
 format.

Package: llvm-3.2-dev
Architecture: any
Depends: ${shlibs:Depends}, libffi-dev (>= 3.0.9), ${misc:Depends}, llvm-3.2 (= ${binary:Version})
Replaces: llvm (<< 2.2-3)
Description: Low-Level Virtual Machine (LLVM), libraries and headers
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides the libraries and headers to develop applications
 using llvm.

Package: libllvm-3.2-ocaml-dev
Section: ocaml
Architecture: any
Suggests: llvm-3.2-doc
Depends: ${shlibs:Depends}, ${misc:Depends}, ${ocaml:Depends}, llvm-3.2-dev (= ${binary:Version})
Replaces: libllvm-ocaml-3.2-dev
Conflicts: libllvm-ocaml-3.2-dev
Provides: ${ocaml:Provides}
Description: Low-Level Virtual Machine (LLVM), bindings for OCaml
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides the OCaml bindings to develop applications using llvm.

Package: llvm-3.2-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}
Description: Low-Level Virtual Machine (LLVM), documentation
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package contains all documentation (extensive).

Package: llvm-3.2-examples
Section: doc
Architecture: all
Depends: ${misc:Depends}, llvm-3.2-dev (>= ${source:Version}), llvm-3.2-dev (<< ${source:Version}+c~)
Description: Low-Level Virtual Machine (LLVM), examples
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package contains examples for using LLVM, both in developing
 extensions to LLVM and in using it to compile code.

Package: llvm-3.2-source
Architecture: all
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: Low-Level Virtual Machine (LLVM), source code
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package contains the llvm source code.

