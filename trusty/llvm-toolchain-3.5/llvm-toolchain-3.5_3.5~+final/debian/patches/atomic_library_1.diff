Index: llvm-toolchain-snapshot_3.5~svn205090/clang/lib/Basic/Targets.cpp
===================================================================
--- llvm-toolchain-snapshot_3.5~svn205090.orig/clang/lib/Basic/Targets.cpp	2014-03-29 12:14:58.543982773 +0100
+++ llvm-toolchain-snapshot_3.5~svn205090/clang/lib/Basic/Targets.cpp	2014-03-29 12:14:58.543982773 +0100
@@ -3843,6 +3843,20 @@
     // FIXME: Override "preferred align" for double and long long.
   }
 
+  static bool shouldUseInlineAtomic(const llvm::Triple &T) {
+    // On linux, binaries targeting old cpus call functions in libgcc to
+    // perform atomic operations. The implementation in libgcc then calls into
+    // the kernel which on armv6 and newer uses ldrex and strex. The net result
+    // is that if we assume the kernel is at least as recent as the hardware,
+    // it is safe to use atomic instructions on armv6 and newer.
+    if (T.getOS() != llvm::Triple::Linux)
+     return false;
+    StringRef ArchName = T.getArchName();
+    if (ArchName.startswith("armv6") || ArchName.startswith("armv7"))
+      return true;
+    return false;
+  }
+
 public:
   ARMTargetInfo(const llvm::Triple &Triple, bool IsBigEndian)
       : TargetInfo(Triple), CPU("arm1136j-s"), FPMath(FP_Default),
Index: llvm-toolchain-snapshot_3.5~svn205090/clang/test/CodeGen/linux-arm-atomic.c
===================================================================
--- llvm-toolchain-snapshot_3.5~svn205090.orig/clang/test/CodeGen/linux-arm-atomic.c	2014-03-29 12:14:58.543982773 +0100
+++ llvm-toolchain-snapshot_3.5~svn205090/clang/test/CodeGen/linux-arm-atomic.c	2014-03-29 12:14:58.543982773 +0100
@@ -1,5 +1,15 @@
 // RUN: %clang_cc1 %s -emit-llvm -o - -triple=armv7-unknown-linux | FileCheck %s
 // RUN: %clang_cc1 %s -emit-llvm -o - -triple=armv6-unknown-linux | FileCheck %s
+
+typedef int _Atomic_word;
+_Atomic_word exchange_and_add(volatile _Atomic_word *__mem, int __val) {
+  return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL);
+}
+
+// CHECK: define {{.*}} @exchange_and_add
+// CHECK: atomicrmw {{.*}} add
+// RUN: %clang_cc1 %s -emit-llvm -o - -triple=armv7-unknown-linux | FileCheck %s
+// RUN: %clang_cc1 %s -emit-llvm -o - -triple=armv6-unknown-linux | FileCheck %s
 // RUN: %clang_cc1 %s -emit-llvm -o - -triple=thumbv7-unknown-linux | FileCheck %s
 // RUN: %clang_cc1 %s -emit-llvm -o - -triple=armv6-unknown-freebsd | FileCheck %s
 // RUN: %clang_cc1 %s -emit-llvm -o - -triple=armv6-unknown-bitrig | FileCheck %s
