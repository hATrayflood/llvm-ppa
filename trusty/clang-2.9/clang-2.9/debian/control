Source: clang-2.9
Section: devel
Priority: extra
Maintainer: ABE Hiroki (hATrayflood) <h.rayflood@gmail.com>
Build-Depends: debhelper (>= 6.0.0), flex, bison, dejagnu, tcl8.5, expect,
    autoconf, automake1.9, perl, libtool, doxygen, chrpath, texinfo,
    sharutils, autotools-dev (>= 20060702.1), libffi-dev (>= 3.0.9),
    lsb-release, patchutils, diffstat, xz-utils, llvm-2.9-dev (>= 2.9), llvm-2.9-source (>= 2.9)
   , gcc-4.6, g++-4.6
Build-Conflicts: oprofile, ocaml
Standards-Version: 3.9.3
Homepage: https://launchpad.net/~h-rayflood/+archive/llvm
Vcs-Browser: https://github.com/hATrayflood/llvm-ppa

Package: clang-2.9
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++6-4.6-dev,
 libclang-common-2.9-dev (= ${binary:Version})
Recommends: llvm-2.9-dev, python
Description: Low-Level Virtual Machine (LLVM), C language family frontend
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants

Package: libclang1-2.9
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++6-4.6-dev
Description: clang library
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the clang library.

Package: libclang-2.9-dev
Architecture: any
Section: libdevel
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++6-4.6-dev,
 libclang1-2.9 (= ${binary:Version}), libclang-common-2.9-dev (= ${binary:Version})
Description: clang library - Development package
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the clang headers.

Package: libclang-common-2.9-dev
Architecture: any
Replaces: libclang-2.9-dev
Section: libdevel
Description: clang library - Common development package
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the clang generic headers.

Package: python-clang-2.9
Architecture: any
Section: python
Depends: ${shlibs:Depends}, ${misc:Depends}, libclang1-2.9 (= ${binary:Version}), python2.7
Description: Clang Python Bindings
 This binding package provides access to the Clang compiler and libraries.
