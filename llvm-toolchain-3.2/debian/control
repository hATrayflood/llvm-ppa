Source: llvm-toolchain-3.2
Section: devel
Priority: optional
Maintainer: LLVM Packaging Team <pkg-llvm-team@lists.alioth.debian.org>
Uploaders: Sylvestre Ledru <sylvestre@debian.org>
Build-Depends: debhelper (>= 9.0), flex, bison, dejagnu, tcl8.5, expect,
    autoconf, automake1.9, perl, libtool, doxygen, chrpath, texinfo,
    sharutils, autotools-dev (>= 20060702.1), libffi-dev (>= 3.0.9),
    lsb-release, patchutils, diffstat, xz-utils, chrpath, python-dev,
    libedit-dev, swig, python-sphinx, ocaml-nox, binutils-dev, libcloog-isl-dev,
    libisl-dev (>= 0.11.1), binutils-gold [amd64 armhf i386 x32],
    gcc-4.7, g++-4.7, libjsoncpp-dev
Build-Conflicts: oprofile, ocaml
Standards-Version: 3.9.4
Homepage: http://www.llvm.org/
Vcs-Svn: svn://svn.debian.org/svn/pkg-llvm/llvm-toolchain/trunk/
Vcs-Browser: http://svn.debian.org/viewsvn/pkg-llvm/llvm-toolchain/trunk/

Package: clang-3.2
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++-4.8-dev,
 libclang-common-dev (= ${binary:Version}),
 libobjc-4.8-dev, libgcc-4.8-dev
Provides: c-compiler, objc-compiler, c++-compiler
Recommends: llvm-3.2-dev, python
Replaces: clang (<< 1:3.1), clang-3.1, compiler-rt
Breaks: clang (<< 1:3.1), clang-3.1, compiler-rt
Description: C, C++ and Objective-C compiler (LLVM based)
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants

Package: clang-3.2-doc
Architecture: all
Section: doc
Depends: ${shlibs:Depends}, ${misc:Depends}
Description: C, C++ and Objective-C compiler (LLVM based) - Documentation
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the documentation.

Package: libclang1
Architecture: any
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++-4.8-dev,
Description: clang library
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the clang library.

Package: libclang1-dbg
Architecture: any
Section: debug
Priority: extra
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++-4.8-dev, libclang1
Description: clang library
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the debugging symbols.

Package: libclang-dev
Architecture: any
Section: libdevel
Depends: ${shlibs:Depends}, ${misc:Depends}, libstdc++-4.8-dev,
 libclang1 (= ${binary:Version}), libclang-common-dev (= ${binary:Version})
Description: clang library - Development package
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the clang headers to develop extensions over libclang.

Package: libclang-common-dev
Architecture: any
Section: libdevel
Depends: ${shlibs:Depends}, ${misc:Depends}
Replaces: llvm-3.2-dev (<< 1:3.2repack), libclang-dev
Breaks: llvm-3.2-dev (<< 1:3.2repack)
Description: clang library - Common development package
 Clang project is a C, C++, Objective C and Objective C++ front-end
 for the LLVM compiler. Some of its goals include the following:
 .
 End-User Features:
 .
    * Fast compiles and low memory use
    * Expressive diagnostics (examples)
    * GCC compatibility
 .
 Utility and Applications:
 .
    * Modular library based architecture
    * Support diverse clients (refactoring, static analysis, code
      generation, etc)
    * Allow tight integration with IDEs
    * Use the LLVM 'BSD' License
 .
 Internal Design and Implementation:
 .
    * A real-world, production quality compiler
    * A simple and hackable code base
    * A single unified parser for C, Objective C, C++, and Objective C++
    * Conformance with C/C++/ObjC and their variants
 .
 This package contains the clang generic headers and some libraries
 (profiling, etc).


# Package: compiler-rt
# Architecture: amd64 i386
# Replaces: libclang-dev
# Section: libdevel
# Depends: ${misc:Depends}, python
# Description: Runtime C library - LLVM based
#  The compiler-rt project is a simple library that provides an implementation of
#  the low-level target-specific hooks required by code generation and other
#  runtime components. For example, when compiling for a 32-bit target,
#  converting a double to a 64-bit unsigned integer is compiling into a runtime
#  call to the "__fixunsdfdi" function. The compiler-rt library provides
#  optimized implementations of this and other low-level routines.
#  .
#  The current feature set of compiler-rt is:
#  .
#     * Full support for the libgcc interfaces on supported targets.
#     * High performance hand tuned implementations of commonly used functions
#       like __floatundidf in assembly that are dramatically faster than the
#       libgcc implementations.
#  .

Package: libllvm3.2
Architecture: any
Section: libs
Depends: ${shlibs:Depends}, ${misc:Depends}
Pre-Depends: ${misc:Pre-Depends}
Multi-Arch: same
Description: Low-Level Virtual Machine (LLVM), runtime library
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs.
 .
 This package contains the LLVM runtime library.

Package: libllvm3.2-dbg
Architecture: any
Section: debug
Priority: extra
Depends: ${shlibs:Depends}, ${misc:Depends}, libllvm3.2
Pre-Depends: ${misc:Pre-Depends}
Multi-Arch: same
Description: Low-Level Virtual Machine (LLVM), debugging symbols library
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs.
 .
 This package contains the LLVM runtime library debug symbols.

Package: llvm-3.2
Architecture: any
Suggests: llvm-3.2-doc
Depends: llvm-3.2-runtime (= ${binary:Version}), ${shlibs:Depends}, ${misc:Depends}, libjs-jquery
Recommends: llvm-3.2-dev
Conflicts: llvm (<< 2.7-1)
Replaces: llvm (<< 2.7-1)
Description: Low-Level Virtual Machine (LLVM)
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 The strengths of the LLVM infrastructure are its extremely
 simple design (which makes it easy to understand and use),
 source-language independence, powerful mid-level optimizer, automated
 compiler debugging support, extensibility, and its stability and
 reliability. LLVM is currently being used to host a wide variety of
 academic research projects and commercial projects. LLVM includes C
 and C++ front-ends, a front-end for a Forth-like language (Stacker), 
 a young scheme front-end, and Java support is in development. LLVM can
 generate code for X86, SparcV9, PowerPC, or it can emit C code.
 .
 LLVM is the key component of the clang compiler and the gcc plugin called
 dragonegg.

Package: llvm-3.2-runtime
Architecture: any
Depends: binfmt-support, ${shlibs:Depends}, ${misc:Depends}
Conflicts: llvm (<< 2.7-1)
Replaces: llvm (<< 2.7-1)
Description: Low-Level Virtual Machine (LLVM), bytecode interpreter
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides the minimal required to execute programs in LLVM
 format.

Package: llvm-3.2-dev
Architecture: any
Depends: ${shlibs:Depends}, libffi-dev (>= 3.0.9), ${misc:Depends}, llvm-3.2 (= ${binary:Version})
Replaces: llvm (<< 2.2-3)
Description: Low-Level Virtual Machine (LLVM), libraries and headers
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides the libraries and headers to develop applications
 using llvm.

Package: libllvm-3.2-ocaml-dev
Section: ocaml
Architecture: any
Suggests: llvm-3.2-doc
Depends: ${shlibs:Depends}, ${misc:Depends}, ${ocaml:Depends}, llvm-3.2-dev (= ${binary:Version})
Replaces: libllvm-ocaml-3.2-dev
Conflicts: libllvm-ocaml-3.2-dev
Provides: ${ocaml:Provides}
Description: Low-Level Virtual Machine (LLVM), bindings for OCaml
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package provides the OCaml bindings to develop applications using llvm.

Package: llvm-3.2-doc
Section: doc
Architecture: all
Depends: ${misc:Depends}
Description: Low-Level Virtual Machine (LLVM), documentation
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package contains all documentation (extensive).

Package: llvm-3.2-examples
Section: doc
Architecture: all
Depends: ${misc:Depends}, llvm-3.2-dev (>= ${source:Version}), llvm-3.2-dev (<< ${source:Version}+c~)
Description: Low-Level Virtual Machine (LLVM), examples
 The Low-Level Virtual Machine (LLVM) is a collection of libraries and
 tools that make it easy to build compilers, optimizers, Just-In-Time
 code generators, and many other compiler-related programs. LLVM
 uses a single, language-independent virtual instruction set both
 as an offline code representation (to communicate code between
 compiler phases and to run-time systems) and as the compiler internal
 representation (to analyze and transform programs). This persistent
 code representation allows a common set of sophisticated compiler
 techniques to be applied at compile-time, link-time, install-time,
 run-time, or "idle-time" (between program runs).
 .
 This package contains examples for using LLVM, both in developing
 extensions to LLVM and in using it to compile code.

# Package: llvm-3.2-source
# Architecture: all
# Depends: ${shlibs:Depends}, ${misc:Depends}
# Description: Low-Level Virtual Machine (LLVM), source code
#  The Low-Level Virtual Machine (LLVM) is a collection of libraries and
#  tools that make it easy to build compilers, optimizers, Just-In-Time
#  code generators, and many other compiler-related programs. LLVM
#  uses a single, language-independent virtual instruction set both
#  as an offline code representation (to communicate code between
#  compiler phases and to run-time systems) and as the compiler internal
#  representation (to analyze and transform programs). This persistent
#  code representation allows a common set of sophisticated compiler
#  techniques to be applied at compile-time, link-time, install-time,
#  run-time, or "idle-time" (between program runs).
#  .
#  This package contains the llvm source code.



# Package: lldb-3.2
# Architecture: amd64 i386
# Depends: ${shlibs:Depends}, ${misc:Depends}, python
# Pre-Depends: ${misc:Pre-Depends}
# Description: Next generation, high-performance debugger
#  LLDB is a next generation, high-performance debugger. It is built as a set of
#  reusable components which highly leverage existing libraries in the larger LLVM
#  Project, such as the Clang expression parser and LLVM disassembler.
